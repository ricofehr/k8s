#!/bin/bash -e

# Default parameters value
OSUSER="tenant0"
OSPASSWORD="tenant0"
OSAUTHURL="http://172.29.236.101:5000/v3"
OSTENANT="tenant0"
OSREGION="RegionOne"
FLAVORMASTERS="large"
FLAVORNODES="xlarge"
PRIVATENETWORK="private"
PUBLICNETWORK="public"
SECURITYGROUP="k8s"
LINUXIMAGE="bionic"
SSHKEYFILE="${HOME}/.ssh/id_rsa.pub"
ANSIBLEPATH="/usr/bin/ansible-playbook"
FLOATINGIPID=""
SUBNETID=""
OSCERTPATH=""

# Help function
deployhelp() {
  cat <<EOF
Usage: $0 [options]
-h           this is some help text.
-a xxxx      openstack auth url, default is http://172.29.236.101:5000/v3
-u xxxx      openstack user, default is tenant0
-p xxxx      openstack password, default is tenant0
-t xxxx      openstack tenant, default is tenant0
-r xxxx      openstack region, default is RegionOne
-fm xxxx     openstack flavor for master instance, default is large
-fn xxxx     openstack flavor for nodes instance, default is xlarge
-fip xxxx    openstack floatingip network id, no default
-oscrt xxxx  openstack ssl certificate path
-s xxxx      openstack tenant security group, default is k8s
-snet xxxx   openstack subnet id, no default
-o xxxx      openstack operating system image, default is bionic
-k xxxx      public rsa key path, default is ~/.ssh/id_rsa.pub
EOF

exit 1
}

# Parse cmd options
while (($# > 0)); do
  case "$1" in
    -a)
      shift
      OSAUTHURL="$1"
      shift
      ;;
    -u)
      shift
      OSUSER="$1"
      shift
      ;;
    -p)
      shift
      OSPASSWORD="$1"
      shift
      ;;
    -t)
      shift
      OSTENANT="$1"
      shift
      ;;
    -r)
      shift
      OSREGION="$1"
      shift
      ;;
    -fip)
      shift
      FLOATINGIPID="$1"
      shift
      ;;
    -fm)
      shift
      FLAVORMASTERS="$1"
      shift
      ;;
    -fn)
      shift
      FLAVORNODES="$1"
      shift
      ;;
    -oscrt)
      shift
      OSCERTPATH="${1}"
      shift
      ;;
    -s)
      shift
      SECURITYGROUP="$1"
      shift
      ;;
    -snet)
      shift
      SUBNETID="$1"
      shift
      ;;
    -o)
      shift
      LINUXIMAGE="$1"
      shift
      ;;
    -k)
      shift
      SSHKEYFILE="$1"
      shift
      ;;
    -h)
      shift
      deployhelp
      ;;
    *)
      shift
      deployhelp
      ;;
  esac
done

# Ensure prerequisites parameters
if [[ ! -f "$ANSIBLEPATH" ]]; then
  ANSIBLEPATH="/usr/local/bin/ansible-playbook"
  if [[ ! -f "$ANSIBLEPATH" ]]; then
    echo "No ansible binary detected"
    exit 1
  fi
fi

if [[ -z "$OSAUTHURL" ]]; then
  echo "-a openstack auth url paremeter is missing"
  deployhelp
fi

if [[ -z "$OSTENANT" ]]; then
  echo "-t openstack tenant paremeter is missing"
  deployhelp
fi

if [[ -z "$OSUSER" ]]; then
  echo "-t openstack user paremeter is missing"
  deployhelp
fi

if [[ -z "$OSPASSWORD" ]]; then
  echo "-p openstack password parameter is missing"
  deployhelp
fi

if [[ -z "$OSREGION" ]]; then
  echo "-r openstack region parameter is missing"
  deployhelp
fi

if [[ -z "$FLAVORMASTERS" ]]; then
  echo "-fm openstack master flavor parameter is missing"
  deployhelp
fi

if [[ -z "$FLAVORNODES" ]]; then
  echo "-fn openstack node flavor parameter is missing"
  deployhelp
fi

if [[ -z "$SECURITYGROUP" ]]; then
  echo "-s openstack security group parameter is missing"
  deployhelp
fi

if [[ -z "$LINUXIMAGE" ]]; then
  echo "-o openstack linux image parameter is missing"
  deployhelp
fi

if [[ -z "$SSHKEYFILE" ]]; then
  echo "-k ssh key parameter is missing"
  deployhelp
fi

if [[ -z "$FLOATINGIPID" ]]; then
  echo "-fip openstack floatingip network id parameter is missing"
  deployhelp
fi

if [[ -z "$SUBNETID" ]]; then
  echo "-snet openstack private subnet id parameter is missing"
  deployhelp
fi


# Create k8s vms
pushd tf/openstack > /dev/null
terraform init
terraform apply -var provider_user="$OSUSER" -var provider_tenant="$OSTENANT" \
-var provider_password="$OSPASSWORD" -var provider_auth_url="$OSAUTHURL" \
-var provider_region="$OSREGION" -var flavor_master="$FLAVORMASTERS" \
-var flavor_node="$FLAVORNODES" -var private_network_name="$PRIVATENETWORK" \
-var public_network_name="$PUBLICNETWORK" -var security_group="$SECURITYGROUP" \
-var image="$LINUXIMAGE" -var keypair_sshkey="$(cat $SSHKEYFILE | tr -d "\n")" -auto-approve

sleep 60

# get private and public vm ips
K8SMASTER_IP="$(terraform output k8s-master1-ip)"
K8SMASTER_PRIVATE_IP="$(terraform output k8s-master1-private-ip)"
K8SNODE1_IP="$(terraform output k8s-node1-ip)"
K8SNODE1_PRIVATE_IP="$(terraform output k8s-node1-private-ip)"
K8SNODE2_IP="$(terraform output k8s-node2-ip)"
K8SNODE2_PRIVATE_IP="$(terraform output k8s-node2-private-ip)"
K8SNODE3_IP="$(terraform output k8s-node3-ip)"
K8SNODE3_PRIVATE_IP="$(terraform output k8s-node3-private-ip)"
popd > /dev/null

pushd ansible > /dev/null

# Prepare inventory
echo "[master]" > tfinventory
echo "k8s-master1 ansible_host=${K8SMASTER_IP} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_python_interpreter=/usr/bin/python3" >> tfinventory
echo "[nodes]" >> tfinventory
echo "k8s-node1 ansible_host=${K8SNODE1_IP} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_python_interpreter=/usr/bin/python3" >> tfinventory
echo "k8s-node2 ansible_host=${K8SNODE2_IP} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_python_interpreter=/usr/bin/python3" >> tfinventory
echo "k8s-node3 ansible_host=${K8SNODE3_IP} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_python_interpreter=/usr/bin/python3" >> tfinventory

# Disable cowsay ansible output
export ANSIBLE_NOCOWS=1

# Install one K8S master and two K8S nodes
$ANSIBLEPATH -i tfinventory \
--ssh-extra-args="-C -o ControlMaster=auto -o ControlPersist=60s -o ConnectTimeout=30 -o ConnectionAttempts=5 -o StrictHostKeyChecking=no" playbook.yml \
--extra-vars="k8s_master_ip=$K8SMASTER_PRIVATE_IP" --extra-vars "k8s_node1_ip=$K8SNODE1_PRIVATE_IP" \
--extra-vars="k8s_node2_ip=$K8SNODE2_PRIVATE_IP" --extra-vars="k8s_node3_ip=$K8SNODE3_PRIVATE_IP" --extra-vars "is_cloud=1" \
--extra-vars="cloud_username=$OSUSER" --extra-vars "cloud_password=$OSPASSWORD" \
--extra-vars="cloud_authurl=$OSAUTHURL" --extra-vars "cloud_tenant_name=$OSTENANT" \
--extra-vars="cloud_subnet_id=$SUBNETID" --extra-vars "cloud_floatingnetwork_id=$FLOATINGIPID" \
--extra-vars="global_ci_install=1" --extra-vars "global_persistence_disk=1" --extra-vars "cloud_crt_path=$OSCERTPATH"

popd > /dev/null
